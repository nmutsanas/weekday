{"version":3,"sources":["src/app.js","src/environment.js","src/main.js","src/question.js","src/resources/index.js"],"names":["App","year","testType","initTest","console","log","answered","correct","wrong","questions","month","evaluateAnswer","question","i","answer","answerEvaluation","fadeBody","description","value","current","document","body","className","newClass","weekdayByIdx","day","days","debug","testing","configure","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","Question","date","randomDateIn","toLocaleString","getDay","Date","getOffset","totalDays","getDate","randomDay","Math","floor","random","result","OFFSETS","isLeapYear","config"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {Question} from './question';\n\nexport class App {\n  constructor() {\n    this.year = 2018; // TODO: make this configurable\n\n    this.testType = 'quiz';\n    this.initTest(this.testType);\n  }\n\n  initTest(testType){\n    console.log(\"initializing test \" + testType);\n    this.testType = testType;\n    this.answered = {correct: 0, wrong: 0};\n    this.questions = [];\n    for (let month = 0; month < 12; month++) {\n      this.questions[month] = new Question(month, this.year, testType);\n    }\n  }\n\n  evaluateAnswer(question, i) {\n    if (question.answer === i) {\n      this.answered.correct++;\n      question.answerEvaluation = \"good\";\n    } else {\n      this.answered.wrong++;\n      question.answerEvaluation = \"bad\";\n    }\n    this.fadeBody(question.answerEvaluation);\n    console.log('Answer given for ' + question.description + ': ' + i + ', correct is : ' + question.answer);\n  }\n\n  fadeBody(value) {\n    let current = document.body.className;\n    let newClass = value + \"fade\";\n    if (current === newClass) {\n      newClass += \"2\";\n    }\n    document.body.className = \"a\";\n    document.body.className = newClass;\n  }\n\n\n  weekdayByIdx(day) {\n    const days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    return days[day];\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export class Question {\n\n  constructor(month, year, testType) {\n    this.month = month;\n    if (testType === 'quiz') {\n      this.date = Question.randomDateIn(month, year);\n      this.description = this.date.toLocaleString(\"en-US\", {day: 'numeric', month: 'long'});\n      this.answer = this.date.getDay();\n      console.log(this.description + \": \" + this.answer);\n    } else { // i.e. offset\n      this.description = new Date(year, month, 1).toLocaleString(\"en-US\", {month: 'long'});\n      this.answer = Question.getOffset(month, year);\n    }\n    this.answerEvaluation = '';\n  }\n\n  static randomDateIn(month, year) {\n    let totalDays = new Date(year, month, 0).getDate();\n    let randomDay = Math.floor(Math.random() * totalDays) + 1;\n    return new Date(year, month, randomDay);\n  }\n\n  static OFFSETS = [6, 2, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4];\n\n  static getOffset(month, year) {\n    let result = Question.OFFSETS[month];\n    if (Question.isLeapYear(year) && month < 2) {\n      return result - 1;\n    }\n    return result;\n  }\n\n  static isLeapYear(year) {\n    return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\n  }\n\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":".."}